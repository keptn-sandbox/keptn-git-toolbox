// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package githandler_mock

import (
	"github.com/keptn-sandbox/keptn-git-toolbox/promotion-service/git"
	"sync"
)

// GitHandlerInterfaceMock is a mock implementation of git.GitHandlerInterface.
//
// 	func TestSomethingThatUsesGitHandlerInterface(t *testing.T) {
//
// 		// make and configure a mocked git.GitHandlerInterface
// 		mockedGitHandlerInterface := &GitHandlerInterfaceMock{
// 			GetGitSecretFunc: func(project string, namespace string) (git.GitCredentials, error) {
// 				panic("mock out the GetGitSecret method")
// 			},
// 			UpdateGitRepoFunc: func(credentials git.GitCredentials, stage string, service string, version string) error {
// 				panic("mock out the UpdateGitRepo method")
// 			},
// 		}
//
// 		// use mockedGitHandlerInterface in code that requires git.GitHandlerInterface
// 		// and then make assertions.
//
// 	}
type GitHandlerInterfaceMock struct {
	// GetGitSecretFunc mocks the GetGitSecret method.
	GetGitSecretFunc func(project string, namespace string) (git.GitCredentials, error)

	// UpdateGitRepoFunc mocks the UpdateGitRepo method.
	UpdateGitRepoFunc func(credentials git.GitCredentials, stage string, service string, version string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetGitSecret holds details about calls to the GetGitSecret method.
		GetGitSecret []struct {
			// Project is the project argument value.
			Project string
			// Namespace is the namespace argument value.
			Namespace string
		}
		// UpdateGitRepo holds details about calls to the UpdateGitRepo method.
		UpdateGitRepo []struct {
			// Credentials is the credentials argument value.
			Credentials git.GitCredentials
			// Stage is the stage argument value.
			Stage string
			// Service is the service argument value.
			Service string
			// Version is the version argument value.
			Version string
		}
	}
	lockGetGitSecret  sync.RWMutex
	lockUpdateGitRepo sync.RWMutex
}

// GetGitSecret calls GetGitSecretFunc.
func (mock *GitHandlerInterfaceMock) GetGitSecret(project string, namespace string) (git.GitCredentials, error) {
	if mock.GetGitSecretFunc == nil {
		panic("GitHandlerInterfaceMock.GetGitSecretFunc: method is nil but GitHandlerInterface.GetGitSecret was just called")
	}
	callInfo := struct {
		Project   string
		Namespace string
	}{
		Project:   project,
		Namespace: namespace,
	}
	mock.lockGetGitSecret.Lock()
	mock.calls.GetGitSecret = append(mock.calls.GetGitSecret, callInfo)
	mock.lockGetGitSecret.Unlock()
	return mock.GetGitSecretFunc(project, namespace)
}

// GetGitSecretCalls gets all the calls that were made to GetGitSecret.
// Check the length with:
//     len(mockedGitHandlerInterface.GetGitSecretCalls())
func (mock *GitHandlerInterfaceMock) GetGitSecretCalls() []struct {
	Project   string
	Namespace string
} {
	var calls []struct {
		Project   string
		Namespace string
	}
	mock.lockGetGitSecret.RLock()
	calls = mock.calls.GetGitSecret
	mock.lockGetGitSecret.RUnlock()
	return calls
}

// UpdateGitRepo calls UpdateGitRepoFunc.
func (mock *GitHandlerInterfaceMock) UpdateGitRepo(credentials git.GitCredentials, stage string, service string, version string) error {
	if mock.UpdateGitRepoFunc == nil {
		panic("GitHandlerInterfaceMock.UpdateGitRepoFunc: method is nil but GitHandlerInterface.UpdateGitRepo was just called")
	}
	callInfo := struct {
		Credentials git.GitCredentials
		Stage       string
		Service     string
		Version     string
	}{
		Credentials: credentials,
		Stage:       stage,
		Service:     service,
		Version:     version,
	}
	mock.lockUpdateGitRepo.Lock()
	mock.calls.UpdateGitRepo = append(mock.calls.UpdateGitRepo, callInfo)
	mock.lockUpdateGitRepo.Unlock()
	return mock.UpdateGitRepoFunc(credentials, stage, service, version)
}

// UpdateGitRepoCalls gets all the calls that were made to UpdateGitRepo.
// Check the length with:
//     len(mockedGitHandlerInterface.UpdateGitRepoCalls())
func (mock *GitHandlerInterfaceMock) UpdateGitRepoCalls() []struct {
	Credentials git.GitCredentials
	Stage       string
	Service     string
	Version     string
} {
	var calls []struct {
		Credentials git.GitCredentials
		Stage       string
		Service     string
		Version     string
	}
	mock.lockUpdateGitRepo.RLock()
	calls = mock.calls.UpdateGitRepo
	mock.lockUpdateGitRepo.RUnlock()
	return calls
}
